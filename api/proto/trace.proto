syntax = "proto3";

package rs.tauri.devtools.trace;

import "google/protobuf/timestamp.proto";
import "common.proto";

message TraceUpdate {
    // A list of new tracing evenrs that happened since the last `TraceUpdate` was
    // sent.
    //
    // If this is empty, no new events were emitted.
    repeated TraceEvent new_events = 1;
    // A count of how many task events were not
    // recorded because the application's event buffer was at capacity.
    //
    // If everything is working normally, this should be 0. If it is greater
    // than 0, that may indicate that some data is missing from this update, and
    // it may be necessary to increase the number of events buffered by the
    // application to ensure that data loss is avoided.
    //
    // If the application's instrumentation ensures reliable delivery of events,
    // this will always be 0.
    uint64 dropped_events = 2;
}

message TraceEvent {
    oneof inner {
        // A new span metadata was registered.
        common.RegisterMetadata register_metadata = 1;
        // A span was created.
        common.Span new_span = 2;
        // A span was entered.
        Enter enter_span = 3;
        // A span was exited.
        Exit exit_span = 4;
        // A span was closed.
        Close close_span = 5;
        // A new thread was registered.
        RegisterThreads register_thread = 6;
        Event event = 7;
   }

    // `RegisterThreads` signals that a new thread was registered.
    message RegisterThreads {
        // `names` maps the registered thread id's to their associated name.
        map<uint64, string> names = 1;
    }

    // `Enter` signals that a span was entered.
    message Enter {
        // `span_id` identifies the span that was entered.
        common.SpanId span_id = 1;
        // `thread_id` identifies who entered the span.
        optional uint64 thread_id = 2;
        // `at` identifies when the span was entered.
        google.protobuf.Timestamp at = 3;
    }

    // `Exit` signals that a span was exited.
    message Exit {
        // `span_id` identifies the span that was exited.
        common.SpanId span_id = 1;
        // `thread_id` identifies who exited the span.
        optional uint64 thread_id = 2;
        // `at` identifies when the span was exited.
        google.protobuf.Timestamp at = 3;
    }

    // `Close` signals that a span was closed.
    message Close {
        // `span_id` identifies the span that was closed.
        common.SpanId span_id = 1;
        // `at` identifies when the span was closed.
        google.protobuf.Timestamp at = 2;
    }

    message Event {
        // Identifier for metadata describing static characteristics of all spans originating
        // from that callsite, such as its name, source code location, verbosity level, and
        // the names of its fields.
        common.MetaId metadata_id = 1;
        // User-defined key-value pairs of arbitrary data that describe the context the span represents,
        repeated common.Field fields = 2;
        // Timestamp for the span.
        google.protobuf.Timestamp at = 3;
    }
}